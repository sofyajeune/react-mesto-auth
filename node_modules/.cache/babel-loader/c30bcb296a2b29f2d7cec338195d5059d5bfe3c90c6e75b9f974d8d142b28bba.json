{"ast":null,"code":"// class Api {\n//   constructor(options) {\n//     this.link = options.link;\n//     this.headers = options.headers;\n//   };\n\n//   _handleResponse = (res) => {\n//     if (res.ok) {\n//       return res.json();\n//     }\n//     return Promise.reject('Ошибка')\n//   };\n\n//   getUserInfo() {\n//     return fetch(`${this.link}/users/me`, {\n//       method: \"GET\",\n//       headers: this.headers\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   getInitialCard() {\n//     return fetch(`${this.link}/cards`, {\n//       method: \"GET\",\n//       headers: this.headers\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   setUserInfo(name, about) {\n//     return fetch(`${this.link}/users/me`, {\n//       method: 'PATCH',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: `${name}`,\n//         about: `${about}`\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   addNewCard(name, link) {\n//     return fetch(`${this.link}/cards`, {\n//       method: 'POST',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: `${name}`,\n//         link: `${link}`\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   addNewAvatar(data) {\n//     return fetch(`${this.link}/users/me/avatar`, {\n//       method: 'PATCH',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         avatar: data.avatar\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   removeCard(id) {\n//     return fetch(`${this.link}/cards/${id}`, {\n//       method: 'DELETE',\n//       headers: this.headers,\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   changeLikeCardStatus(id, like) {\n//     const whichMethod = like ? \"DELETE\" : \"PUT\";\n//     return fetch(`${this.link}/cards/${id}/likes`, {\n//       method: whichMethod,\n//       headers: this.headers,\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           return res.json();\n//         }\n//         return Promise.reject(`Error: ${res.status}`)\n//       })\n//       .catch(err => console.log(err))\n//   }\n// }\n\nclass Api {\n  constructor(baseUrl, headers) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }\n  _getFetch(pathUrl) {\n    return fetch(`${this._baseUrl}${pathUrl}`, {\n      headers: this._headers\n    }).then(res => this._getResponseData(res));\n  }\n  _patchFetch(pathUrl, bodyConstructor) {\n    return fetch(`${this._baseUrl}${pathUrl}`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: bodyConstructor\n    }).then(res => this._getResponseData(res));\n  }\n  _postFetch(pathUrl, bodyConstructor) {\n    return fetch(`${this._baseUrl}${pathUrl}`, {\n      method: 'POST',\n      headers: this._headers,\n      body: bodyConstructor\n    }).then(res => this._getResponseData(res));\n  }\n  _deleteFetch(pathUrl) {\n    return fetch(`${this._baseUrl}${pathUrl}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._getResponseData(res));\n  }\n  _putFetch(pathUrl) {\n    return fetch(`${this._baseUrl}${pathUrl}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => this._getResponseData(res));\n  }\n  getUserInfo() {\n    return this._getFetch('/users/me');\n  }\n  getCards() {\n    return this._getFetch('/cards');\n  }\n  editProfile(data) {\n    return this._patchFetch('/users/me', JSON.stringify({\n      name: data.name,\n      about: data.about\n    }));\n  }\n  editProfileAvatar(data) {\n    return this._patchFetch(`/users/me/avatar`, JSON.stringify({\n      avatar: data\n    }));\n  }\n  addCard(data) {\n    return this._postFetch('/cards', JSON.stringify({\n      name: data.name,\n      link: data.link\n    }));\n  }\n  deleteCard(id) {\n    return this._deleteFetch(`/cards/${id}`);\n  }\n  likeCard(id) {\n    return this._putFetch(`/cards/${id}/likes`);\n  }\n  deleteLikeCard(id) {\n    return this._deleteFetch(`/cards/${id}/likes`);\n  }\n}\nconst options = {\n  link: 'https://mesto.nomoreparties.co/v1/cohort-55/',\n  headers: {\n    authorization: '129cec41-0265-437c-8285-b8860fe417f8',\n    'Content-Type': 'application/json'\n  }\n};\nexport const api = new Api(options);","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_getResponseData","res","ok","Promise","reject","status","json","_getFetch","pathUrl","fetch","then","_patchFetch","bodyConstructor","method","body","_postFetch","_deleteFetch","_putFetch","getUserInfo","getCards","editProfile","data","JSON","stringify","name","about","editProfileAvatar","avatar","addCard","link","deleteCard","id","likeCard","deleteLikeCard","options","authorization","api"],"sources":["/Users/sofya/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["// class Api {\n//   constructor(options) {\n//     this.link = options.link;\n//     this.headers = options.headers;\n//   };\n\n//   _handleResponse = (res) => {\n//     if (res.ok) {\n//       return res.json();\n//     }\n//     return Promise.reject('Ошибка')\n//   };\n\n//   getUserInfo() {\n//     return fetch(`${this.link}/users/me`, {\n//       method: \"GET\",\n//       headers: this.headers\n//     })\n//       .then(this._handleResponse)\n//   };\n\n\n//   getInitialCard() {\n//     return fetch(`${this.link}/cards`, {\n//       method: \"GET\",\n//       headers: this.headers\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   setUserInfo(name, about) {\n//     return fetch(`${this.link}/users/me`, {\n//       method: 'PATCH',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: `${name}`,\n//         about: `${about}`\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   addNewCard(name, link) {\n//     return fetch(`${this.link}/cards`, {\n//       method: 'POST',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: `${name}`,\n//         link: `${link}`\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   addNewAvatar(data) {\n//     return fetch(`${this.link}/users/me/avatar`, {\n//       method: 'PATCH',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         avatar: data.avatar\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   removeCard(id) {\n//     return fetch(`${this.link}/cards/${id}`, {\n//       method: 'DELETE',\n//       headers: this.headers,\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   changeLikeCardStatus(id, like) {\n//     const whichMethod = like ? \"DELETE\" : \"PUT\";\n//     return fetch(`${this.link}/cards/${id}/likes`, {\n//       method: whichMethod,\n//       headers: this.headers,\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           return res.json();\n//         }\n//         return Promise.reject(`Error: ${res.status}`)\n//       })\n//       .catch(err => console.log(err))\n//   }\n// }\n\nclass Api {\n  constructor(baseUrl, headers) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }\n\n  _getFetch(pathUrl) {\n    return fetch(`${this._baseUrl}${pathUrl}`, {\n      headers: this._headers,\n    }).then((res) => this._getResponseData(res));\n  }\n\n  _patchFetch(pathUrl, bodyConstructor) {\n    return fetch(`${this._baseUrl}${pathUrl}`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: bodyConstructor,\n    }).then((res) => this._getResponseData(res));\n  }\n\n  _postFetch(pathUrl, bodyConstructor) {\n    return fetch(`${this._baseUrl}${pathUrl}`, {\n      method: 'POST',\n      headers: this._headers,\n      body: bodyConstructor,\n    }).then((res) => this._getResponseData(res));\n  }\n\n  _deleteFetch(pathUrl) {\n    return fetch(`${this._baseUrl}${pathUrl}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    }).then((res) => this._getResponseData(res));\n  }\n\n  _putFetch(pathUrl) {\n    return fetch(`${this._baseUrl}${pathUrl}`, {\n      method: 'PUT',\n      headers: this._headers,\n    }).then((res) => this._getResponseData(res));\n  }\n\n  getUserInfo() {\n    return this._getFetch('/users/me');\n  }\n\n  getCards() {\n    return this._getFetch('/cards');\n  }\n\n  editProfile(data) {\n    return this._patchFetch(\n      '/users/me',\n      JSON.stringify({\n        name: data.name,\n        about: data.about,\n      })\n    );\n  }\n\n  editProfileAvatar(data) {\n    return this._patchFetch(\n      `/users/me/avatar`,\n      JSON.stringify({\n        avatar: data,\n      })\n    );\n  }\n\n  addCard(data) {\n    return this._postFetch(\n      '/cards',\n      JSON.stringify({\n        name: data.name,\n        link: data.link,\n      })\n    );\n  }\n\n  deleteCard(id) {\n    return this._deleteFetch(`/cards/${id}`);\n  }\n\n  likeCard(id) {\n    return this._putFetch(`/cards/${id}/likes`);\n  }\n\n  deleteLikeCard(id) {\n    return this._deleteFetch(`/cards/${id}/likes`);\n  }\n}\n\nconst options = {\n  link: 'https://mesto.nomoreparties.co/v1/cohort-55/',\n  headers: {\n      authorization: '129cec41-0265-437c-8285-b8860fe417f8',\n      'Content-Type': 'application/json'\n  }\n}\n\nexport const api = new Api(options)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}