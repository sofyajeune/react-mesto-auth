{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._handleResponse = res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject('Ошибка');\n    };\n    this.link = options.link;\n    this.headers = options.headers;\n  }\n  getUserInfo() {\n    return fetch(`${this.link}/users/me`, {\n      method: \"GET\",\n      headers: this.headers\n    }).then(this._handleResponse);\n  }\n  getInitialCard() {\n    return fetch(`${this.link}/cards`, {\n      method: \"GET\",\n      headers: this.headers\n    }).then(this._handleResponse);\n  }\n  setUserInfo(name, about) {\n    return fetch(`${this.link}/users/me`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: `${name}`,\n        about: `${about}`\n      })\n    }).then(this._handleResponse);\n  }\n  addNewCard(name, link) {\n    return fetch(`${this.link}/cards`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: `${name}`,\n        link: `${link}`\n      })\n    }).then(this._handleResponse);\n  }\n  addNewAvatar(data) {\n    return fetch(`${this.link}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._handleResponse);\n  }\n  removeCard(id) {\n    return fetch(`${this.link}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(this._handleResponse);\n  }\n  changeLikeCardStatus(id, like) {\n    const whichMethod = like ? \"DELETE\" : \"PUT\";\n    return fetch(`${this.link}/cards/${id}/likes`, {\n      method: whichMethod,\n      headers: this.headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Error: ${res.status}`);\n    }).catch(err => console.log(err));\n  }\n}\n\n// class Api {\n//   constructor(baseUrl, headers) {\n//     this._baseUrl = baseUrl;\n//     this._headers = headers;\n//   }\n\n//   _getResponseData(res) {\n//     if (!res.ok) {\n//       return Promise.reject(`Ошибка: ${res.status}`);\n//     }\n//     return res.json();\n//   }\n\n//   _getFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _patchFetch(pathUrl, bodyConstructor) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'PATCH',\n//       headers: this._headers,\n//       body: bodyConstructor,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _postFetch(pathUrl, bodyConstructor) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'POST',\n//       headers: this._headers,\n//       body: bodyConstructor,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _deleteFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'DELETE',\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _putFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'PUT',\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   getUserInfo() {\n//     return this._getFetch('/users/me');\n//   }\n\n//   getCards() {\n//     return this._getFetch('/cards');\n//   }\n\n//   editProfile(data) {\n//     return this._patchFetch(\n//       '/users/me',\n//       JSON.stringify({\n//         name: data.name,\n//         about: data.about,\n//       })\n//     );\n//   }\n\n//   editProfileAvatar(data) {\n//     return this._patchFetch(\n//       `/users/me/avatar`,\n//       JSON.stringify({\n//         avatar: data,\n//       })\n//     );\n//   }\n\n//   addCard(data) {\n//     return this._postFetch(\n//       '/cards',\n//       JSON.stringify({\n//         name: data.name,\n//         link: data.link,\n//       })\n//     );\n//   }\n\n//   deleteCard(id) {\n//     return this._deleteFetch(`/cards/${id}`);\n//   }\n\n//   likeCard(id) {\n//     return this._putFetch(`/cards/${id}/likes`);\n//   }\n\n//   deleteLikeCard(id) {\n//     return this._deleteFetch(`/cards/${id}/likes`);\n//   }\n// }\n\nexport const api = new Api('https://mesto.nomoreparties.co/v1/cohort-55/', {\n  authorization: '129cec41-0265-437c-8285-b8860fe417f8',\n  'Content-Type': 'application/json'\n});","map":{"version":3,"names":["Api","constructor","options","_handleResponse","res","ok","json","Promise","reject","link","headers","getUserInfo","fetch","method","then","getInitialCard","setUserInfo","name","about","body","JSON","stringify","addNewCard","addNewAvatar","data","avatar","removeCard","id","changeLikeCardStatus","like","whichMethod","status","catch","err","console","log","api","authorization"],"sources":["/Users/sofya/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this.link = options.link;\n    this.headers = options.headers;\n  };\n\n  _handleResponse = (res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject('Ошибка')\n  };\n\n  getUserInfo() {\n    return fetch(`${this.link}/users/me`, {\n      method: \"GET\",\n      headers: this.headers\n    })\n      .then(this._handleResponse)\n  };\n\n\n  getInitialCard() {\n    return fetch(`${this.link}/cards`, {\n      method: \"GET\",\n      headers: this.headers\n    })\n      .then(this._handleResponse)\n  };\n\n  setUserInfo(name, about) {\n    return fetch(`${this.link}/users/me`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: `${name}`,\n        about: `${about}`\n      })\n    })\n      .then(this._handleResponse)\n  };\n\n  addNewCard(name, link) {\n    return fetch(`${this.link}/cards`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: `${name}`,\n        link: `${link}`\n      })\n    })\n      .then(this._handleResponse)\n  };\n\n  addNewAvatar(data) {\n    return fetch(`${this.link}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    })\n      .then(this._handleResponse)\n  };\n\n  removeCard(id) {\n    return fetch(`${this.link}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this.headers,\n    })\n      .then(this._handleResponse)\n  };\n\n  changeLikeCardStatus(id, like) {\n    const whichMethod = like ? \"DELETE\" : \"PUT\";\n    return fetch(`${this.link}/cards/${id}/likes`, {\n      method: whichMethod,\n      headers: this.headers,\n    })\n      .then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Error: ${res.status}`)\n      })\n      .catch(err => console.log(err))\n  }\n}\n\n// class Api {\n//   constructor(baseUrl, headers) {\n//     this._baseUrl = baseUrl;\n//     this._headers = headers;\n//   }\n\n//   _getResponseData(res) {\n//     if (!res.ok) {\n//       return Promise.reject(`Ошибка: ${res.status}`);\n//     }\n//     return res.json();\n//   }\n\n//   _getFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _patchFetch(pathUrl, bodyConstructor) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'PATCH',\n//       headers: this._headers,\n//       body: bodyConstructor,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _postFetch(pathUrl, bodyConstructor) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'POST',\n//       headers: this._headers,\n//       body: bodyConstructor,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _deleteFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'DELETE',\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _putFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'PUT',\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   getUserInfo() {\n//     return this._getFetch('/users/me');\n//   }\n\n//   getCards() {\n//     return this._getFetch('/cards');\n//   }\n\n//   editProfile(data) {\n//     return this._patchFetch(\n//       '/users/me',\n//       JSON.stringify({\n//         name: data.name,\n//         about: data.about,\n//       })\n//     );\n//   }\n\n//   editProfileAvatar(data) {\n//     return this._patchFetch(\n//       `/users/me/avatar`,\n//       JSON.stringify({\n//         avatar: data,\n//       })\n//     );\n//   }\n\n//   addCard(data) {\n//     return this._postFetch(\n//       '/cards',\n//       JSON.stringify({\n//         name: data.name,\n//         link: data.link,\n//       })\n//     );\n//   }\n\n//   deleteCard(id) {\n//     return this._deleteFetch(`/cards/${id}`);\n//   }\n\n//   likeCard(id) {\n//     return this._putFetch(`/cards/${id}/likes`);\n//   }\n\n//   deleteLikeCard(id) {\n//     return this._deleteFetch(`/cards/${id}/likes`);\n//   }\n// }\n\nexport const api = new Api('https://mesto.nomoreparties.co/v1/cohort-55/', {\n  authorization: '129cec41-0265-437c-8285-b8860fe417f8',\n  'Content-Type': 'application/json'\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}