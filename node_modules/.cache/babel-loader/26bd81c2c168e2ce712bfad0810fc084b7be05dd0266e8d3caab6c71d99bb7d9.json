{"ast":null,"code":"// class Api {\n//   constructor(options) {\n//     this.link = options.link;\n//     this.headers = options.headers;\n//   };\n\n//   _handleResponse = (res) => {\n//     if (res.ok) {\n//       return res.json();\n//     }\n//     return Promise.reject('Ошибка')\n//   };\n\n//   getUserInfo() {\n//     return fetch(`${this.link}/users/me`, {\n//       method: \"GET\",\n//       headers: this.headers\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   getInitialCard() {\n//     return fetch(`${this.link}/cards`, {\n//       method: \"GET\",\n//       headers: this.headers\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   setUserInfo(name, about) {\n//     return fetch(`${this.link}/users/me`, {\n//       method: 'PATCH',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: `${name}`,\n//         about: `${about}`\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   addNewCard(name, link) {\n//     return fetch(`${this.link}/cards`, {\n//       method: 'POST',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: `${name}`,\n//         link: `${link}`\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   addNewAvatar(data) {\n//     return fetch(`${this.link}/users/me/avatar`, {\n//       method: 'PATCH',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         avatar: data.avatar\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   removeCard(id) {\n//     return fetch(`${this.link}/cards/${id}`, {\n//       method: 'DELETE',\n//       headers: this.headers,\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   changeLikeCardStatus(id, like) {\n//     const whichMethod = like ? \"DELETE\" : \"PUT\";\n//     return fetch(`${this.link}/cards/${id}/likes`, {\n//       method: whichMethod,\n//       headers: this.headers,\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           return res.json();\n//         }\n//         return Promise.reject(`Error: ${res.status}`)\n//       })\n//       .catch(err => console.log(err))\n//   }\n// }\n\n// class Api {\n//   constructor(baseUrl, headers) {\n//     this._baseUrl = baseUrl;\n//     this._headers = headers;\n//   }\n\n//   _getResponseData(res) {\n//     if (!res.ok) {\n//       return Promise.reject(`Ошибка: ${res.status}`);\n//     }\n//     return res.json();\n//   }\n\n//   _getFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _patchFetch(pathUrl, bodyConstructor) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'PATCH',\n//       headers: this._headers,\n//       body: bodyConstructor,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _postFetch(pathUrl, bodyConstructor) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'POST',\n//       headers: this._headers,\n//       body: bodyConstructor,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _deleteFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'DELETE',\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _putFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'PUT',\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   getUserInfo() {\n//     return this._getFetch('/users/me');\n//   }\n\n//   // _getFetch(pathUrl) {\n//   //   return fetch(`${this._baseUrl}${pathUrl}`, {\n//   //     headers: this._headers,\n//   //   }).then((res) => this._getResponseData(res));\n//   // }\n\n//   //   getUserInfo() {\n//   //   return fetch(`${this.link}/users/me`, {\n//   //     method: \"GET\",\n//   //     headers: this.headers\n//   //   })\n//   //     .then(this._handleResponse)\n//   // };\n\n//   getCards() {\n//     return this._getFetch('/cards');\n//   }\n\n//   editProfile(data) {\n//     return this._patchFetch(\n//       '/users/me',\n//       JSON.stringify({\n//         name: data.name,\n//         about: data.about,\n//       })\n//     );\n//   }\n\n//   editProfileAvatar(data) {\n//     return this._patchFetch(\n//       `/users/me/avatar`,\n//       JSON.stringify({\n//         avatar: data,\n//       })\n//     );\n//   }\n\n//   addCard(data) {\n//     return this._postFetch(\n//       '/cards',\n//       JSON.stringify({\n//         name: data.name,\n//         link: data.link,\n//       })\n//     );\n//   }\n\n//   deleteCard(id) {\n//     return this._deleteFetch(`/cards/${id}`);\n//   }\n\n//   likeCard(id) {\n//     return this._putFetch(`/cards/${id}/likes`);\n//   }\n\n//   deleteLikeCard(id) {\n//     return this._deleteFetch(`/cards/${id}/likes`);\n//   }\n// }\n\nconst options = {\n  link: 'https://mesto.nomoreparties.co/v1/cohort-55/',\n  headers: {\n    authorization: '129cec41-0265-437c-8285-b8860fe417f8',\n    'Content-Type': 'application/json'\n  }\n};\nexport const api = new Api(options);","map":{"version":3,"names":["options","link","headers","authorization","api","Api"],"sources":["/Users/sofya/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["// class Api {\n//   constructor(options) {\n//     this.link = options.link;\n//     this.headers = options.headers;\n//   };\n\n//   _handleResponse = (res) => {\n//     if (res.ok) {\n//       return res.json();\n//     }\n//     return Promise.reject('Ошибка')\n//   };\n\n//   getUserInfo() {\n//     return fetch(`${this.link}/users/me`, {\n//       method: \"GET\",\n//       headers: this.headers\n//     })\n//       .then(this._handleResponse)\n//   };\n\n\n//   getInitialCard() {\n//     return fetch(`${this.link}/cards`, {\n//       method: \"GET\",\n//       headers: this.headers\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   setUserInfo(name, about) {\n//     return fetch(`${this.link}/users/me`, {\n//       method: 'PATCH',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: `${name}`,\n//         about: `${about}`\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   addNewCard(name, link) {\n//     return fetch(`${this.link}/cards`, {\n//       method: 'POST',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: `${name}`,\n//         link: `${link}`\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   addNewAvatar(data) {\n//     return fetch(`${this.link}/users/me/avatar`, {\n//       method: 'PATCH',\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         avatar: data.avatar\n//       })\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   removeCard(id) {\n//     return fetch(`${this.link}/cards/${id}`, {\n//       method: 'DELETE',\n//       headers: this.headers,\n//     })\n//       .then(this._handleResponse)\n//   };\n\n//   changeLikeCardStatus(id, like) {\n//     const whichMethod = like ? \"DELETE\" : \"PUT\";\n//     return fetch(`${this.link}/cards/${id}/likes`, {\n//       method: whichMethod,\n//       headers: this.headers,\n//     })\n//       .then(res => {\n//         if (res.ok) {\n//           return res.json();\n//         }\n//         return Promise.reject(`Error: ${res.status}`)\n//       })\n//       .catch(err => console.log(err))\n//   }\n// }\n\n// class Api {\n//   constructor(baseUrl, headers) {\n//     this._baseUrl = baseUrl;\n//     this._headers = headers;\n//   }\n\n//   _getResponseData(res) {\n//     if (!res.ok) {\n//       return Promise.reject(`Ошибка: ${res.status}`);\n//     }\n//     return res.json();\n//   }\n\n//   _getFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _patchFetch(pathUrl, bodyConstructor) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'PATCH',\n//       headers: this._headers,\n//       body: bodyConstructor,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _postFetch(pathUrl, bodyConstructor) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'POST',\n//       headers: this._headers,\n//       body: bodyConstructor,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _deleteFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'DELETE',\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   _putFetch(pathUrl) {\n//     return fetch(`${this._baseUrl}${pathUrl}`, {\n//       method: 'PUT',\n//       headers: this._headers,\n//     }).then((res) => this._getResponseData(res));\n//   }\n\n//   getUserInfo() {\n//     return this._getFetch('/users/me');\n//   }\n\n//   // _getFetch(pathUrl) {\n//   //   return fetch(`${this._baseUrl}${pathUrl}`, {\n//   //     headers: this._headers,\n//   //   }).then((res) => this._getResponseData(res));\n//   // }\n\n//   //   getUserInfo() {\n//   //   return fetch(`${this.link}/users/me`, {\n//   //     method: \"GET\",\n//   //     headers: this.headers\n//   //   })\n//   //     .then(this._handleResponse)\n//   // };\n\n//   getCards() {\n//     return this._getFetch('/cards');\n//   }\n\n//   editProfile(data) {\n//     return this._patchFetch(\n//       '/users/me',\n//       JSON.stringify({\n//         name: data.name,\n//         about: data.about,\n//       })\n//     );\n//   }\n\n//   editProfileAvatar(data) {\n//     return this._patchFetch(\n//       `/users/me/avatar`,\n//       JSON.stringify({\n//         avatar: data,\n//       })\n//     );\n//   }\n\n//   addCard(data) {\n//     return this._postFetch(\n//       '/cards',\n//       JSON.stringify({\n//         name: data.name,\n//         link: data.link,\n//       })\n//     );\n//   }\n\n//   deleteCard(id) {\n//     return this._deleteFetch(`/cards/${id}`);\n//   }\n\n//   likeCard(id) {\n//     return this._putFetch(`/cards/${id}/likes`);\n//   }\n\n//   deleteLikeCard(id) {\n//     return this._deleteFetch(`/cards/${id}/likes`);\n//   }\n// }\n\nconst options = {\n  link: 'https://mesto.nomoreparties.co/v1/cohort-55/',\n  headers: {\n      authorization: '129cec41-0265-437c-8285-b8860fe417f8',\n      'Content-Type': 'application/json'\n  }\n}\n\nexport const api = new Api(options)"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAG;EACdC,IAAI,EAAE,8CAA8C;EACpDC,OAAO,EAAE;IACLC,aAAa,EAAE,sCAAsC;IACrD,cAAc,EAAE;EACpB;AACF,CAAC;AAED,OAAO,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACL,OAAO,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}